#!/bin/bash

start() {
    if [[ $1 == "" ]]
    then
        num='1'
    else
        num=$1
    fi

    gearman_pid=`pgrep gearman`
    if [[ $gearman_pid == "" ]]
    then
        echo "Warning : gearman not running on this server"
    fi

    dirs_ok=false
    for rep in /var/log
    do
        if test -d $rep && test -w $rep
        then
            dirs_ok=true
        else
            dirs_ok=false
        fi
    done

    if [[ $dirs_ok ]]
    then
        for i in `seq 1 $num`
           do
            /sbin/start-stop-daemon -d /usr/local/wapy -c wapyd:adm -x ./wapy_worker.py -S -- $i
           done

        status
    else
        echo "Some system dirs are not writeable, launch this script with root user"
    fi
}

stop() {
    pid=`pgrep -f wapy_worker.py`
    if [[ $pid == "" ]]
    then
        echo "No process running, use start to launch python worker"
        exit 1
    else
        for runPid in $pid
        do
            kill $runPid
        done
    fi
    echo "Worker stopped" >>/var/log/wapyd.log
}

status() {
    gearman_pid=`pgrep gearman`
    if [[ $gearman_pid == "" ]]
    then
        echo "gearman not running on this server"
    else
        echo "gearman running, pid $gearman_pid"
    fi

    redis_pid=`pgrep redis`
    if [[ $redis_pid == "" ]]
    then
        echo "redis not running"
    else
        echo "redis running, pid $redis_pid"
    fi

    pid=`pgrep -f wapy_worker.py`
    if [[ $pid == "" ]]
    then
        echo "No process running"
        exit 1
    else
        arr=($pid)
        set -- $pid
        echo ${#arr[@]}" workers running, pids "$pid
    fi
    echo "Worker stopped" >>/var/log/wapyd.log
}

case $1 in
        start)
                start $2
        ;;
        stop)
                stop
        ;;
        restart)
                stop; start;
        ;;
        status)
                status
        ;;
        *)
                echo "You must give a command : start [number of worker to start], stop, restart or status"
        ;;
esac
exit 1





